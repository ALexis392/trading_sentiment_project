#!/usr/bin/env python3
"""
main_advanced.py - Sistema Avanzado de Trading con Tasa Libre de Riesgo

Main mejorado con estrategias de tasa libre de riesgo y visualizaciones
"""
import sys
import os
from typing import List, Dict, Any, Optional, Tuple
import pandas as pd
import numpy as np

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

try:
    # Importar configuraciones b√°sicas
    from src.config.config import TradingConfig, DEFAULT_CONFIG
    
    # Importar configuraciones avanzadas
    from src.config.advanced_config import (
        AdvancedTradingConfig, AnalysisRequest, BacktestingThresholds,
        STRICT_STRATEGY, MODERATE_STRATEGY, LAX_STRATEGY, DEFAULT_STRATEGY,
        QUICK_ANALYSIS_ENHANCED, COMPREHENSIVE_ANALYSIS_ENHANCED, CRYPTO_ANALYSIS_ENHANCED
    )
    
    # Importar m√≥dulos del sistema
    from src.core.market_sentiment_trader import MarketSentimentTrader
    from src.analysis.analysis_runner import AnalysisRunner
    
    # Intentar importar backtester mejorado
    try:
        from src.backtesting.backtester_enhanced import EnhancedBacktester
        from src.visualization.chart_generator import ChartGenerator
        ENHANCED_BACKTESTER_AVAILABLE = True
        print("‚úÖ Backtester mejorado con tasa libre de riesgo disponible")
    except ImportError:
        try:
            from src.backtesting.backtester_advanced import AdvancedBacktester as EnhancedBacktester
            ENHANCED_BACKTESTER_AVAILABLE = False
            print("‚ö†Ô∏è  Usando backtester avanzado est√°ndar")
        except ImportError:
            from src.backtesting.backtester import Backtester as EnhancedBacktester
            ENHANCED_BACKTESTER_AVAILABLE = False
            print("‚ö†Ô∏è  Usando backtester b√°sico")
    
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("üí° Verifica que la estructura de carpetas sea correcta")
    print("üìÅ Estructura esperada:")
    print("   src/config/advanced_config.py")
    print("   src/backtesting/backtester_enhanced.py")
    print("   src/visualization/chart_generator.py")
    sys.exit(1)


class EnhancedAnalysisRunner:
    """Ejecutor mejorado de an√°lisis con tasa libre de riesgo y gr√°ficos"""
    
    def __init__(self):
        self.results_cache = {}
        self.chart_generator = ChartGenerator() if ENHANCED_BACKTESTER_AVAILABLE else None
    
    def print_header(self):
        """Imprime header mejorado"""
        print("=" * 110)
        print("üöÄ SISTEMA AVANZADO DE TRADING CON TASA LIBRE DE RIESGO Y VISUALIZACIONES")
        print("=" * 110)
        print("üìä Caracter√≠sticas Mejoradas:")
        print("   ‚Ä¢ An√°lisis multi-s√≠mbolo y multi-per√≠odo")
        print("   ‚Ä¢ Prevenci√≥n de look-ahead bias")
        print("   ‚Ä¢ Estrategias configurables (estricta/moderada/laxa)")
        print("   ‚Ä¢ ‚ú® NUEVO: Estrategias con tasa libre de riesgo")
        print("   ‚Ä¢ ‚ú® NUEVO: Ahorro mensual vs capital completo")
        print("   ‚Ä¢ ‚ú® NUEVO: Gr√°ficos comparativos autom√°ticos")
        print("   ‚Ä¢ ‚ú® NUEVO: An√°lisis detallado de umbrales VIX/RSI")
        if ENHANCED_BACKTESTER_AVAILABLE:
            print("   ‚Ä¢ üéØ Backtester mejorado disponible ‚úÖ")
        else:
            print("   ‚Ä¢ ‚ö†Ô∏è  Usando backtester est√°ndar")
        print("=" * 110)
    
    def show_enhanced_strategy_info(self, config: AdvancedTradingConfig):
        """Muestra informaci√≥n detallada de la estrategia mejorada"""
        strategy_info = config.get_strategy_summary()
        
        print(f"\nüìã CONFIGURACI√ìN DE ESTRATEGIA MEJORADA:")
        print(f"   üéØ Estrategia: {strategy_info['strategy_name']}")
        print(f"   üí∞ Capital inicial: ${config.INITIAL_CAPITAL:,.2f}")
        print(f"   üìà Tasa libre de riesgo: {config.RISK_FREE_RATE_ANNUAL:.1%} anual")
        print(f"   üí∏ Costo de transacci√≥n: {config.TRANSACTION_COST:.3%}")
        print(f"   üìä VIX - Miedo: {strategy_info['vix_thresholds']['fear']}")
        print(f"   üìä VIX - Euforia: {strategy_info['vix_thresholds']['euphoria']}")
        print(f"   üìà RSI - Sobreventa: {strategy_info['rsi_thresholds']['oversold']}")
        print(f"   üìà RSI - Sobrecompra: {strategy_info['rsi_thresholds']['overbought']}")
        print(f"   üìâ BB - L√≠mite Inferior: {strategy_info['bb_thresholds']['lower']}")
        print(f"   üìâ BB - L√≠mite Superior: {strategy_info['bb_thresholds']['upper']}")
        print(f"   üîí Prevenci√≥n Look-ahead: {'‚úÖ S√≠' if strategy_info['lookahead_prevention'] else '‚ùå No'}")
        print(f"   üìä Ventana Expandida: {'‚úÖ S√≠' if strategy_info['expanding_window'] else '‚ùå No'}")
        print(f"   üìà Generar gr√°ficos: {'‚úÖ S√≠' if config.GENERATE_CHARTS else '‚ùå No'}")
    
    def run_enhanced_single_analysis(self, symbol: str, years: int, 
                                   config: AdvancedTradingConfig) -> Dict[str, Any]:
        """Ejecuta an√°lisis mejorado para un s√≠mbolo y per√≠odo espec√≠fico"""
        
        print(f"\nüîç AN√ÅLISIS MEJORADO: {symbol} - {years} a√±os")
        print("-" * 60)
        
        try:
            # Crear trader con configuraci√≥n mejorada
            trader = MarketSentimentTrader(symbol, config)
            
            # Obtener datos completos para entrenar modelo
            print("üìä Obteniendo datos hist√≥ricos completos...")
            full_data = trader.fetch_data(period='max')
            full_data_with_indicators, vix_percentiles = trader.calculate_indicators(full_data)
            full_labeled_data = trader.create_market_labels(full_data_with_indicators, vix_percentiles)
            
            # Entrenar modelo con todos los datos
            print("ü§ñ Entrenando modelo ML...")
            accuracy = trader.train_model(full_labeled_data)
            
            # Filtrar datos para per√≠odo de inversi√≥n
            end_date = full_labeled_data.index[-1]
            start_investment_date = end_date - pd.DateOffset(years=years)
            investment_period_data = full_labeled_data[full_labeled_data.index >= start_investment_date].copy()
            
            print(f"üìÖ Per√≠odo de an√°lisis: {investment_period_data.index[0].strftime('%Y-%m-%d')} a {investment_period_data.index[-1].strftime('%Y-%m-%d')}")
            print(f"üìä Datos: {len(investment_period_data)} d√≠as ({len(investment_period_data)/252:.2f} a√±os)")
            
            # Usar backtester mejorado si est√° disponible
            if ENHANCED_BACKTESTER_AVAILABLE:
                # Reemplazar el backtester del trader con el mejorado
                trader.backtester = EnhancedBacktester(config)
                
                # Ejecutar backtesting mejorado
                backtest_data, performance_metrics = trader.backtester.run_enhanced_backtest(
                    investment_period_data, symbol
                )
            else:
                # Usar backtesting est√°ndar
                backtest_data, performance_metrics = trader.backtest_strategy(investment_period_data)
            
            # Predicci√≥n actual
            current_prediction = trader.predict_market_state(full_labeled_data)
            
            # An√°lisis de condiciones de mercado
            market_analysis = self.analyze_market_conditions_enhanced(
                trader, investment_period_data, symbol
            )
            
            # Compilar resultados
            results = {
                'trader': trader,
                'full_data': full_labeled_data,
                'investment_data': investment_period_data,
                'backtest_data': backtest_data,
                'performance_metrics': performance_metrics,
                'current_prediction': current_prediction,
                'market_analysis': market_analysis,
                'model_accuracy': accuracy,
                'feature_importance': trader.get_feature_importance(),
                'enhanced_features': {
                    'risk_free_rate_strategies': ENHANCED_BACKTESTER_AVAILABLE,
                    'charts_generated': config.GENERATE_CHARTS and ENHANCED_BACKTESTER_AVAILABLE
                }
            }
            
            return results
            
        except Exception as e:
            print(f"‚ùå Error en an√°lisis mejorado: {str(e)}")
            raise
    
    def analyze_market_conditions_enhanced(self, trader: MarketSentimentTrader, 
                                         data: pd.DataFrame, symbol: str) -> Dict[str, Any]:
        """An√°lisis mejorado de condiciones de mercado con valores espec√≠ficos de umbrales"""
        
        if data.empty or len(data) < 100:
            return {'error': 'Datos insuficientes para an√°lisis'}
        
        try:
            # Obtener valores actuales
            recent_data = data.tail(30)
            last_valid_idx = data.dropna().index[-1]
            
            current_conditions = {
                'vix_current': float(data['VIX'].iloc[-1]),
                'vix_recent_avg': float(recent_data['VIX'].mean()),
                'vix_percentile': float(data['VIX'].rank(pct=True).iloc[-1] * 100),
                
                'rsi_current': float(data['RSI'].iloc[-1]),
                'rsi_recent_avg': float(recent_data['RSI'].mean()),
                'rsi_percentile': float(data['RSI'].rank(pct=True).iloc[-1] * 100),
                
                'bb_position_current': float(data['BB_Position'].iloc[-1]),
                'bb_position_avg': float(recent_data['BB_Position'].mean()),
                
                'volatility_current': float(data['Volatility_20'].iloc[-1]),
                'volatility_recent_avg': float(recent_data['Volatility_20'].mean()),
                'volatility_percentile': float(data['Volatility_20'].rank(pct=True).iloc[-1] * 100),
                
                'price_change_20_current': float(data['Price_Change_20'].iloc[-1]),
                'price_change_percentile': float(data['Price_Change_20'].rank(pct=True).iloc[-1] * 100)
            }
            
            # Obtener umbrales espec√≠ficos calculados
            thresholds = trader.config.backtesting_thresholds
            
            # Calcular umbrales espec√≠ficos (valores reales, no percentiles)
            calculated_thresholds = {}
            
            if trader.config.PREVENT_LOOKAHEAD_BIAS and 'VIX_Q_Fear' in data.columns:
                # Usar umbrales din√°micos calculados
                calculated_thresholds = {
                    'vix_fear_value': float(data.loc[last_valid_idx, 'VIX_Q_Fear']) if 'VIX_Q_Fear' in data.columns else data['VIX'].quantile(thresholds.vix_fear_threshold),
                    'vix_euphoria_value': float(data.loc[last_valid_idx, 'VIX_Q_Euphoria']) if 'VIX_Q_Euphoria' in data.columns else data['VIX'].quantile(thresholds.vix_euphoria_threshold),
                    'rsi_oversold_value': float(data.loc[last_valid_idx, 'RSI_Q_Oversold']) if 'RSI_Q_Oversold' in data.columns else data['RSI'].quantile(thresholds.rsi_oversold),
                    'rsi_overbought_value': float(data.loc[last_valid_idx, 'RSI_Q_Overbought']) if 'RSI_Q_Overbought' in data.columns else data['RSI'].quantile(thresholds.rsi_overbought),
                }
            else:
                # Usar umbrales fijos basados en toda la data
                calculated_thresholds = {
                    'vix_fear_value': float(data['VIX'].quantile(thresholds.vix_fear_threshold)),
                    'vix_euphoria_value': float(data['VIX'].quantile(thresholds.vix_euphoria_threshold)),
                    'rsi_oversold_value': float(data['RSI'].quantile(thresholds.rsi_oversold)),
                    'rsi_overbought_value': float(data['RSI'].quantile(thresholds.rsi_overbought)),
                }
            
            # Evaluar condiciones espec√≠ficas
            fear_conditions = {
                'vix_extreme': current_conditions['vix_current'] > calculated_thresholds['vix_fear_value'],
                'rsi_oversold': current_conditions['rsi_current'] < calculated_thresholds['rsi_oversold_value'],
                'bb_lower': current_conditions['bb_position_current'] < thresholds.bb_lower_threshold,
                'volatility_high': current_conditions['volatility_percentile'] > (thresholds.volatility_high * 100)
            }
            
            euphoria_conditions = {
                'vix_low': current_conditions['vix_current'] < calculated_thresholds['vix_euphoria_value'],
                'rsi_overbought': current_conditions['rsi_current'] > calculated_thresholds['rsi_overbought_value'],
                'bb_upper': current_conditions['bb_position_current'] > thresholds.bb_upper_threshold,
                'price_change_high': current_conditions['price_change_percentile'] > (thresholds.price_change_extreme * 100)
            }
            
            # Se√±al final
            fear_score = sum(fear_conditions.values())
            euphoria_score = sum(euphoria_conditions.values())
            
            if fear_score >= 2:
                market_signal = "COMPRAR"
                market_state = "Miedo/Oportunidad"
                signal_strength = min(fear_score / len(fear_conditions), 1.0)
            elif euphoria_score >= 3:
                market_signal = "VENDER"
                market_state = "Euforia/Sobrevalorado"
                signal_strength = min(euphoria_score / len(euphoria_conditions), 1.0)
            else:
                market_signal = "MANTENER"
                market_state = "Normal/Neutral"
                signal_strength = 0.5
            
            return {
                'symbol': symbol,
                'current_conditions': current_conditions,
                'calculated_thresholds': calculated_thresholds,
                'fear_conditions': fear_conditions,
                'euphoria_conditions': euphoria_conditions,
                'fear_score': fear_score,
                'euphoria_score': euphoria_score,
                'market_signal': market_signal,
                'market_state': market_state,
                'signal_strength': signal_strength,
                'threshold_percentiles': {
                    'vix_fear': thresholds.vix_fear_threshold,
                    'vix_euphoria': thresholds.vix_euphoria_threshold,
                    'rsi_oversold': thresholds.rsi_oversold,
                    'rsi_overbought': thresholds.rsi_overbought,
                    'bb_lower': thresholds.bb_lower_threshold,
                    'bb_upper': thresholds.bb_upper_threshold
                }
            }
            
        except Exception as e:
            return {'error': f'Error en an√°lisis de condiciones: {str(e)}'}
    
    def print_enhanced_market_analysis(self, market_analysis: Dict[str, Any]):
        """Imprime an√°lisis detallado mejorado con valores espec√≠ficos"""
        
        if 'error' in market_analysis:
            print(f"‚ö†Ô∏è  Error en an√°lisis: {market_analysis['error']}")
            return
        
        symbol = market_analysis['symbol']
        conditions = market_analysis['current_conditions']
        thresholds = market_analysis['calculated_thresholds']
        fear_cond = market_analysis['fear_conditions']
        euphoria_cond = market_analysis['euphoria_conditions']
        threshold_pcts = market_analysis['threshold_percentiles']
        
        print(f"\nüîç AN√ÅLISIS DETALLADO DE CONDICIONES - {symbol}")
        print("=" * 70)
        
        # Estado general
        print(f"üìä Estado del Mercado: {market_analysis['market_state']}")
        print(f"üéØ Se√±al: {market_analysis['market_signal']}")
        print(f"üí™ Fuerza de Se√±al: {market_analysis['signal_strength']:.0%}")
        
        # Condiciones actuales con umbrales espec√≠ficos
        print(f"\nüìà CONDICIONES ACTUALES vs UMBRALES ESPEC√çFICOS:")
        print(f"   VIX: {conditions['vix_current']:.1f} | Miedo: >{thresholds['vix_fear_value']:.1f} ({threshold_pcts['vix_fear']:.0%}) | Euforia: <{thresholds['vix_euphoria_value']:.1f} ({threshold_pcts['vix_euphoria']:.0%})")
        print(f"   RSI: {conditions['rsi_current']:.1f} | Sobreventa: <{thresholds['rsi_oversold_value']:.1f} ({threshold_pcts['rsi_oversold']:.0%}) | Sobrecompra: >{thresholds['rsi_overbought_value']:.1f} ({threshold_pcts['rsi_overbought']:.0%})")
        print(f"   BB Position: {conditions['bb_position_current']:.2f} | L√≠mites: <{threshold_pcts['bb_lower']:.0%} y >{threshold_pcts['bb_upper']:.0%}")
        print(f"   Volatilidad: {conditions['volatility_current']:.1f}% (percentil {conditions['volatility_percentile']:.0f}%)")
        print(f"   Cambio 20d: {conditions['price_change_20_current']:+.1f}% (percentil {conditions['price_change_percentile']:.0f}%)")
        
        # Condiciones activas
        active_fear = [k for k, v in fear_cond.items() if v]
        if active_fear:
            print(f"\nüò∞ CONDICIONES DE MIEDO ACTIVAS ({len(active_fear)}):")
            condition_explanations = {
                'vix_extreme': f'VIX {conditions["vix_current"]:.1f} > {thresholds["vix_fear_value"]:.1f}',
                'rsi_oversold': f'RSI {conditions["rsi_current"]:.1f} < {thresholds["rsi_oversold_value"]:.1f}',
                'bb_lower': f'BB Position {conditions["bb_position_current"]:.2f} < {threshold_pcts["bb_lower"]:.0%}',
                'volatility_high': f'Volatilidad en percentil {conditions["volatility_percentile"]:.0f}%'
            }
            for condition in active_fear:
                explanation = condition_explanations.get(condition, condition.replace('_', ' ').title())
                print(f"   ‚úÖ {explanation}")
        
        active_euphoria = [k for k, v in euphoria_cond.items() if v]
        if active_euphoria:
            print(f"\nüöÄ CONDICIONES DE EUFORIA ACTIVAS ({len(active_euphoria)}):")
            condition_explanations = {
                'vix_low': f'VIX {conditions["vix_current"]:.1f} < {thresholds["vix_euphoria_value"]:.1f}',
                'rsi_overbought': f'RSI {conditions["rsi_current"]:.1f} > {thresholds["rsi_overbought_value"]:.1f}',
                'bb_upper': f'BB Position {conditions["bb_position_current"]:.2f} > {threshold_pcts["bb_upper"]:.0%}',
                'price_change_high': f'Cambio precio en percentil {conditions["price_change_percentile"]:.0f}%'
            }
            for condition in active_euphoria:
                explanation = condition_explanations.get(condition, condition.replace('_', ' ').title())
                print(f"   ‚úÖ {explanation}")
        
        if not active_fear and not active_euphoria:
            print(f"\nüòê ESTADO NEUTRAL - No hay condiciones extremas activas")
    
    def run_enhanced_analysis(self, request: AnalysisRequest) -> Dict[str, Any]:
        """Ejecuta an√°lisis mejorado seg√∫n la configuraci√≥n"""
        
        print(f"\nüöÄ INICIANDO AN√ÅLISIS MEJORADO CON TASA LIBRE DE RIESGO")
        print(f"   üìä S√≠mbolos: {', '.join(request.symbols)}")
        print(f"   üìÖ Per√≠odos: {', '.join(map(str, request.periods))} a√±os")
        print(f"   üìà Incluir m√°ximo: {'S√≠' if request.include_max_period else 'No'}")
        print(f"   üéØ Estrategia: {request.backtesting_strategy}")
        print(f"   üí∞ Tasa libre de riesgo: {request.trading_config.RISK_FREE_RATE_ANNUAL:.1%}")
        
        # Configurar estrategia
        request.trading_config.set_backtesting_strategy(request.backtesting_strategy)
        self.show_enhanced_strategy_info(request.trading_config)
        
        all_results = {}
        
        for symbol in request.symbols:
            print(f"\n" + "="*90)
            print(f"üìä ANALIZANDO {symbol} CON ESTRATEGIAS MEJORADAS")
            print("="*90)
            
            symbol_results = {}
            
            try:
                # An√°lisis por per√≠odo
                for years in request.periods:
                    print(f"\nüìÖ Per√≠odo: {years} a√±os")
                    
                    try:
                        results = self.run_enhanced_single_analysis(symbol, years, request.trading_config)
                        
                        # Mostrar an√°lisis detallado
                        self.print_enhanced_market_analysis(results['market_analysis'])
                        
                        # Mostrar resumen de estrategias mejoradas
                        self.print_enhanced_performance_summary(results['performance_metrics'], years)
                        
                        symbol_results[f"{years}y"] = results
                        
                    except Exception as e:
                        print(f"‚ùå Error en per√≠odo {years} a√±os: {str(e)}")
                        symbol_results[f"{years}y"] = {'error': str(e)}
                
                # An√°lisis de per√≠odo m√°ximo si se solicita
                if request.include_max_period:
                    print(f"\nüìÖ Per√≠odo: M√ÅXIMO")
                    print("-" * 50)
                    
                    try:
                        # Para per√≠odo m√°ximo, usar configuraci√≥n especial
                        max_config = request.trading_config
                        max_config.INITIAL_CAPITAL = request.trading_config.INITIAL_CAPITAL
                        
                        trader = MarketSentimentTrader(symbol, max_config)
                        
                        if ENHANCED_BACKTESTER_AVAILABLE:
                            trader.backtester = EnhancedBacktester(max_config)
                            
                        max_results = trader.run_complete_analysis(period='max')
                        
                        if 'backtest_results' in max_results:
                            market_analysis = self.analyze_market_conditions_enhanced(
                                trader, max_results['backtest_results'], symbol
                            )
                            max_results['market_analysis'] = market_analysis
                            self.print_enhanced_market_analysis(market_analysis)
                        
                        symbol_results['max'] = max_results
                        
                        # Mostrar resumen
                        if 'performance_metrics' in max_results:
                            metrics = max_results['performance_metrics']
                            period_years = metrics['period']['years']
                            self.print_enhanced_performance_summary(metrics, f"m√°ximo ({period_years:.1f} a√±os)")
                        
                    except Exception as e:
                        print(f"‚ùå Error en per√≠odo m√°ximo: {str(e)}")
                        symbol_results['max'] = {'error': str(e)}
                
            except Exception as e:
                print(f"‚ùå Error general para {symbol}: {str(e)}")
                symbol_results = {'error': str(e)}
            
            all_results[symbol] = symbol_results
        
        # Resumen final mejorado
        self.print_enhanced_final_summary(all_results, request)
        
        return {
            'request_config': request,
            'trading_config': request.trading_config,
            'results': all_results,
            'strategy_info': request.trading_config.get_strategy_summary(),
            'enhanced_features': {
                'risk_free_rate_strategies': ENHANCED_BACKTESTER_AVAILABLE,
                'visualization_available': ENHANCED_BACKTESTER_AVAILABLE
            }
        }
    
    def print_enhanced_performance_summary(self, metrics: Dict[str, Any], period_desc: str):
        """Imprime resumen mejorado de rendimiento"""
        
        print(f"\nüí∞ RESUMEN DE RENDIMIENTO - {period_desc}:")
        
        # Verificar si tenemos estrategias mejoradas
        if 'strategy1' in metrics:
            print(f"   üîµ Estrategia 1 (Capital + RF): {metrics['strategy1']['annual_return']:+.1f}% anual")
        if 'strategy2' in metrics:
            print(f"   üü¢ Estrategia 2 (Ahorro + RF): {metrics['strategy2']['annual_return']:+.1f}% anual")
        
        # Estrategias tradicionales
        if 'buyhold' in metrics:
            print(f"   üü† Buy & Hold: {metrics['buyhold']['annual_return']:+.1f}% anual")
        if 'dca' in metrics:
            print(f"   üî¥ DCA: {metrics['dca']['annual_return']:+.1f}% anual")
        
        # Estrategia cl√°sica (si existe)
        if 'strategy' in metrics:
            print(f"   ‚ö™ Estrategia Cl√°sica: {metrics['strategy']['annual_return']:+.1f}% anual")
        
        # Comparaciones mejoradas
        if 'comparisons' in metrics:
            comparisons = metrics['comparisons']
            print(f"\nüèÜ OUTPERFORMANCES:")
            if 'strategy1_vs_buyhold' in comparisons:
                print(f"      Estrategia 1 vs Buy & Hold: {comparisons['strategy1_vs_buyhold']:+.1f}%")
            if 'strategy2_vs_buyhold' in comparisons:
                print(f"      Estrategia 2 vs Buy & Hold: {comparisons['strategy2_vs_buyhold']:+.1f}%")
            if 'strategy1_vs_dca' in comparisons:
                print(f"      Estrategia 1 vs DCA: {comparisons['strategy1_vs_dca']:+.1f}%")
            if 'strategy2_vs_dca' in comparisons:
                print(f"      Estrategia 2 vs DCA: {comparisons['strategy2_vs_dca']:+.1f}%")
        
        # Informaci√≥n adicional de estrategias mejoradas
        if 'simulation_details' in metrics:
            details = metrics['simulation_details']
            print(f"\n‚ö° DETALLES DE OPERACIONES:")
            if 'strategy1_trades' in details:
                print(f"      Estrategia 1: {len(details['strategy1_trades'])} operaciones")
            if 'strategy2_trades' in details:
                print(f"      Estrategia 2: {len(details['strategy2_trades'])} operaciones")
            if 'monthly_savings' in details and details['monthly_savings'] > 0:
                print(f"      Ahorro mensual: ${details['monthly_savings']:,.2f}")
            if 'risk_free_rate' in details:
                print(f"      Tasa libre de riesgo: {details['risk_free_rate']:.1%}")
            if 'chart_path' in details:
                print(f"      üìà Gr√°fico generado: {details['chart_path']}")

    def print_enhanced_final_summary(self, all_results: Dict[str, Any], request: AnalysisRequest):
        """Imprime resumen final mejorado de todos los an√°lisis"""
        
        print(f"\nüéØ RESUMEN FINAL DEL AN√ÅLISIS MEJORADO")
        print("=" * 90)
        
        # Contar resultados exitosos
        total_symbols = len(request.symbols)
        successful_symbols = len([s for s, r in all_results.items() if 'error' not in r])
        
        print(f"üìä S√≠mbolos analizados: {successful_symbols}/{total_symbols}")
        print(f"üìÖ Per√≠odos por s√≠mbolo: {len(request.periods)} + {'m√°ximo' if request.include_max_period else 'sin m√°ximo'}")
        print(f"üí∞ Capital base: ${request.trading_config.INITIAL_CAPITAL:,.2f}")
        print(f"üìà Tasa libre de riesgo: {request.trading_config.RISK_FREE_RATE_ANNUAL:.1%}")
        print(f"üéØ Estrategia: {request.backtesting_strategy}")
        
        # Resumen por s√≠mbolo
        for symbol, symbol_results in all_results.items():
            if 'error' in symbol_results:
                print(f"\n‚ùå {symbol}: {symbol_results['error']}")
                continue
                
            print(f"\nüìä {symbol} - Resumen:")
            
            for period_key, period_results in symbol_results.items():
                if 'error' in period_results:
                    print(f"   ‚ùå {period_key}: {period_results['error']}")
                    continue
                    
                if 'performance_metrics' in period_results:
                    metrics = period_results['performance_metrics']
                    
                    # Mejor estrategia
                    strategies = {}
                    if 'strategy1' in metrics:
                        strategies['Estrategia 1'] = metrics['strategy1']['annual_return']
                    if 'strategy2' in metrics:
                        strategies['Estrategia 2'] = metrics['strategy2']['annual_return']
                    if 'buyhold' in metrics:
                        strategies['Buy & Hold'] = metrics['buyhold']['annual_return']
                    if 'dca' in metrics:
                        strategies['DCA'] = metrics['dca']['annual_return']
                    
                    if strategies:
                        best_strategy = max(strategies, key=strategies.get)
                        best_return = strategies[best_strategy]
                        print(f"   üèÜ {period_key}: {best_strategy} ({best_return:+.1f}% anual)")
        
        print(f"\n‚úÖ An√°lisis completado con estrategias mejoradas de tasa libre de riesgo")
        if ENHANCED_BACKTESTER_AVAILABLE:
            print(f"üìà Gr√°ficos generados autom√°ticamente para cada an√°lisis")
        print(f"üí° Los resultados incluyen prevenci√≥n de look-ahead bias")
    

def create_enhanced_custom_request() -> AnalysisRequest:
    """Crea configuraci√≥n personalizada mejorada"""
    
    print("\nüõ†Ô∏è  CONFIGURACI√ìN PERSONALIZADA MEJORADA")
    print("=" * 60)
    
    # S√≠mbolos
    symbols_input = input("üìä S√≠mbolos a analizar (ej: SPYG,QQQ,BTC-USD): ").strip()
    symbols = [s.strip().upper() for s in symbols_input.split(',')] if symbols_input else ['SPYG']
    
    # Per√≠odos en a√±os
    periods_input = input("üìÖ Per√≠odos en a√±os (ej: 1,3,5): ").strip()
    if periods_input:
        try:
            periods = [int(p.strip()) for p in periods_input.split(',')]
        except ValueError:
            print("‚ö†Ô∏è  Error en per√≠odos, usando [3,5] por defecto")
            periods = [3, 5]
    else:
        periods = [3, 5]
    
    # Per√≠odo m√°ximo
    include_max = input("üìà ¬øIncluir per√≠odo m√°ximo? (s/n): ").strip().lower()
    include_max_period = include_max in ['s', 'si', 's√≠', 'y', 'yes']
    
    # Capital inicial
    capital_input = input(f"üí∞ Capital inicial (default 10000): ").strip()
    initial_capital = float(capital_input) if capital_input else 10000
    
    # NUEVA: Tasa libre de riesgo
    rf_rate_input = input(f"üìà Tasa libre de riesgo anual % (default 5.0): ").strip()
    if rf_rate_input:
        try:
            rf_rate = float(rf_rate_input) / 100  # Convertir porcentaje a decimal
            if rf_rate < 0 or rf_rate > 0.20:  # L√≠mite razonable 0-20%
                raise ValueError("Tasa fuera del rango razonable")
        except ValueError:
            print("‚ö†Ô∏è  Tasa inv√°lida, usando 5% por defecto")
            rf_rate = 0.05
    else:
        rf_rate = 0.05
    
    # Estrategia de backtesting
    print("\nüéØ Estrategias disponibles:")
    print("   1. strict    - Muy estricta (se√±ales menos frecuentes pero m√°s confiables)")
    print("   2. moderate  - Moderada (balance entre frecuencia y confiabilidad)")
    print("   3. lax       - Laxa (m√°s se√±ales, menos restrictiva)")
    print("   4. default   - Por defecto (estricta est√°ndar)")
    print("   5. custom    - Personalizada (definir umbrales manualmente)")
    
    strategy_choice = input("Selecciona estrategia (1-5): ").strip()
    
    strategy_map = {
        '1': 'strict',
        '2': 'moderate', 
        '3': 'lax',
        '4': 'default',
        '5': 'custom'
    }
    
    backtesting_strategy = strategy_map.get(strategy_choice, 'default')
    
    # Crear configuraci√≥n mejorada
    trading_config = AdvancedTradingConfig(
        INITIAL_CAPITAL=initial_capital,
        RISK_FREE_RATE_ANNUAL=rf_rate,
        GENERATE_CHARTS=True,
        SAVE_CHARTS=True
    )
    
    # Configuraci√≥n personalizada de umbrales si se eligi√≥ custom
    if backtesting_strategy == 'custom':
        print("\n‚öôÔ∏è  CONFIGURACI√ìN PERSONALIZADA DE UMBRALES:")
        print("   (Presiona Enter para usar valores por defecto)")
        
        try:
            vix_fear = input(f"VIX percentil para miedo (default 90): ").strip()
            vix_euphoria = input(f"VIX percentil para euforia (default 10): ").strip()
            rsi_oversold = input(f"RSI percentil sobreventa (default 10): ").strip()
            rsi_overbought = input(f"RSI percentil sobrecompra (default 90): ").strip()
            bb_lower = input(f"BB posici√≥n l√≠mite inferior (default 5): ").strip()
            bb_upper = input(f"BB posici√≥n l√≠mite superior (default 95): ").strip()
            
            custom_thresholds = BacktestingThresholds()
            
            if vix_fear:
                custom_thresholds.vix_fear_threshold = float(vix_fear) / 100
            if vix_euphoria:
                custom_thresholds.vix_euphoria_threshold = float(vix_euphoria) / 100
            if rsi_oversold:
                custom_thresholds.rsi_oversold = float(rsi_oversold) / 100
            if rsi_overbought:
                custom_thresholds.rsi_overbought = float(rsi_overbought) / 100
            if bb_lower:
                custom_thresholds.bb_lower_threshold = float(bb_lower) / 100
            if bb_upper:
                custom_thresholds.bb_upper_threshold = float(bb_upper) / 100
            
            trading_config.backtesting_thresholds = custom_thresholds
            
        except ValueError:
            print("‚ö†Ô∏è  Error en configuraci√≥n personalizada, usando valores por defecto")
            backtesting_strategy = 'default'
    
    print(f"\n‚úÖ Configuraci√≥n creada:")
    print(f"   üí∞ Capital: ${trading_config.INITIAL_CAPITAL:,.2f}")
    print(f"   üìà Tasa RF: {trading_config.RISK_FREE_RATE_ANNUAL:.1%}")
    print(f"   üìä Gr√°ficos: {'S√≠' if trading_config.GENERATE_CHARTS else 'No'}")
    
    return AnalysisRequest(
        symbols=symbols,
        periods=periods,
        include_max_period=include_max_period,
        trading_config=trading_config,
        analysis_type="complete",
        backtesting_strategy=backtesting_strategy
    )


def show_enhanced_strategy_comparison():
    """Muestra comparaci√≥n detallada de estrategias mejoradas"""
    
    print("\nüìä COMPARACI√ìN DE ESTRATEGIAS MEJORADAS")
    print("=" * 100)
    
    strategies = {
        'Estricta': STRICT_STRATEGY,
        'Moderada': MODERATE_STRATEGY,
        'Laxa': LAX_STRATEGY,
        'Default': DEFAULT_STRATEGY
    }
    
    print(f"{'Estrategia':<12} {'VIX Miedo':<12} {'VIX Euforia':<12} {'RSI Over':<12} {'RSI Under':<12} {'BB L√≠mites':<15}")
    print("-" * 100)
    
    for name, strategy in strategies.items():
        vix_fear = f">{strategy.vix_fear_threshold:.0%}"
        vix_euphoria = f"<{strategy.vix_euphoria_threshold:.0%}"
        rsi_over = f"<{strategy.rsi_oversold:.0%}"
        rsi_under = f">{strategy.rsi_overbought:.0%}"
        bb_limits = f"{strategy.bb_lower_threshold:.0%}-{strategy.bb_upper_threshold:.0%}"
        
        print(f"{name:<12} {vix_fear:<12} {vix_euphoria:<12} {rsi_over:<12} {rsi_under:<12} {bb_limits:<15}")
    
    print(f"\nüîÑ NUEVAS ESTRATEGIAS CON TASA LIBRE DE RIESGO:")
    print(f"   üí∞ Estrategia 1: Capital completo esperando se√±ales (ganando RF mientras espera)")
    print(f"   üí∞ Estrategia 2: Ahorro mensual acumulando en RF hasta se√±ales de compra")
    print(f"   üìà Tasa por defecto: 5% anual (configurable)")
    print(f"   üìä Ambas incluyen costos de transacci√≥n y look-ahead bias prevention")
    
    print(f"\nüí° RECOMENDACIONES:")
    print(f"   üéØ Estricta + RF: Para m√°xima conservaci√≥n, pocas operaciones")
    print(f"   ‚öñÔ∏è  Moderada + RF: Balance √≥ptimo para la mayor√≠a")
    print(f"   üöÄ Laxa + RF: Para mercados vol√°tiles o traders activos")
    print(f"   üìã Estrategia 1: Si tienes capital completo desde el inicio")
    print(f"   üìã Estrategia 2: Si vas ahorrando gradualmente")


def show_risk_free_rate_info():
    """Explica las estrategias con tasa libre de riesgo"""
    
    print("\nüí∞ ESTRATEGIAS CON TASA LIBRE DE RIESGO")
    print("=" * 70)
    
    print("‚ùì ¬øQu√© son las estrategias con tasa libre de riesgo?")
    print("   Las nuevas estrategias invierten el dinero no utilizado en una")
    print("   tasa libre de riesgo mientras esperan se√±ales de trading.")
    
    print("\nüîµ ESTRATEGIA 1: CAPITAL COMPLETO + TASA LIBRE DE RIESGO")
    print("   ‚Ä¢ Tienes $10,000 desde el inicio")
    print("   ‚Ä¢ Mientras esperas se√±al de compra: dinero gana 5% anual")
    print("   ‚Ä¢ Al recibir se√±al de compra: inviertes todo en el activo")
    print("   ‚Ä¢ Al recibir se√±al de venta: vuelves a tasa libre de riesgo")
    print("   ‚Ä¢ Ventaja: Siempre est√°s ganando algo, no hay dinero inactivo")
    
    print("\nüü¢ ESTRATEGIA 2: AHORRO MENSUAL + TASA LIBRE DE RIESGO")
    print("   ‚Ä¢ Ahorras gradualmente hasta llegar a $10,000")
    print("   ‚Ä¢ Cada mes: depositas en cuenta que gana 5% anual")
    print("   ‚Ä¢ Al recibir se√±al de compra: inviertes todo lo ahorrado")
    print("   ‚Ä¢ Sigues ahorrando mensualmente durante la inversi√≥n")
    print("   ‚Ä¢ Al vender: todo va a tasa libre de riesgo + sigues ahorrando")
    print("   ‚Ä¢ Ventaja: Simula ahorro real + inversi√≥n por oportunidades")
    
    print("\nüìä COMPARACI√ìN CON ESTRATEGIAS TRADICIONALES:")
    print("   üìà Buy & Hold: Compra al inicio y mantiene")
    print("   üí∞ DCA: Invierte cantidad fija peri√≥dicamente")
    print("   üîµ Estrategia 1: Espera oportunidades ganando tasa RF")
    print("   üü¢ Estrategia 2: Ahorra + espera oportunidades ganando tasa RF")
    
    print("\n‚öôÔ∏è CONFIGURACI√ìN:")
    print("   ‚Ä¢ Tasa libre de riesgo por defecto: 5% anual")
    print("   ‚Ä¢ Configurable entre 0% y 20%")
    print("   ‚Ä¢ Se aplica diariamente: (1 + tasa_anual)^(1/252) - 1")
    print("   ‚Ä¢ Incluye costos de transacci√≥n al entrar/salir del mercado")


def show_visualization_info():
    """Explica las visualizaciones disponibles"""
    
    print("\nüìà VISUALIZACIONES Y GR√ÅFICOS")
    print("=" * 60)
    
    print("üìä GR√ÅFICOS AUTOM√ÅTICOS GENERADOS:")
    if ENHANCED_BACKTESTER_AVAILABLE:
        print("   ‚úÖ Evoluci√≥n comparativa de portfolios")
        print("   ‚úÖ An√°lisis de drawdown por estrategia")
        print("   ‚úÖ M√©tricas de rendimiento en barras")
        print("   ‚úÖ Se√±ales de trading sobre precio del activo")
        print("   ‚úÖ An√°lisis de umbrales din√°micos (VIX, RSI, BB)")
        print("   ‚úÖ Gr√°ficos guardados autom√°ticamente en PNG")
    else:
        print("   ‚ùå M√≥dulo de visualizaci√≥n no disponible")
        print("   üí° Instala matplotlib y seaborn para habilitar gr√°ficos")
    
    print("\nüìà TIPOS DE GR√ÅFICOS:")
    print("   1. Gr√°fico Principal: Compara todas las estrategias en el tiempo")
    print("   2. An√°lisis de Drawdown: Muestra p√©rdidas m√°ximas")
    print("   3. M√©tricas de Barras: Retorno anual vs Sharpe ratio")
    print("   4. Se√±ales de Trading: Puntos de compra/venta sobre el precio")
    print("   5. An√°lisis de Umbrales: VIX y RSI con niveles din√°micos")
    
    print("\nüé® CARACTER√çSTICAS:")
    print("   ‚Ä¢ Estilo moderno con colores distintivos")
    print("   ‚Ä¢ Resoluci√≥n alta (300 DPI) para impresi√≥n")
    print("   ‚Ä¢ Formato PNG con fondo blanco")
    print("   ‚Ä¢ Nombres autom√°ticos con timestamp")
    print("   ‚Ä¢ Visualizaci√≥n inmediata + guardado autom√°tico")
    
    print("\nüí° INTERPRETACI√ìN:")
    print("   üìä L√≠neas ascendentes = mejor rendimiento")
    print("   üìâ Drawdown menor = menor riesgo")
    print("   üü¢ Puntos verdes = se√±ales de compra")
    print("   üî¥ Puntos rojos = se√±ales de venta")
    print("   üìà Umbrales din√°micos = adaptaci√≥n al mercado")


def main_menu():
    """Men√∫ principal mejorado"""
    
    runner = EnhancedAnalysisRunner()
    runner.print_header()
    
    while True:
        print("\n" + "="*70)
        print("üéõÔ∏è  MEN√ö PRINCIPAL MEJORADO")
        print("="*70)
        print("1. üöÄ An√°lisis r√°pido mejorado (SPYG - 3 a√±os + RF)")
        print("2. üìä An√°lisis comprehensivo mejorado (m√∫ltiples activos + RF)")
        print("3. ü™ô An√°lisis de criptomonedas mejorado (BTC/ETH + RF)")
        print("4. üõ†Ô∏è  Configuraci√≥n personalizada mejorada")
        print("5. üìã Mostrar estrategias mejoradas disponibles")
        print("6. ‚ùì Informaci√≥n sobre tasa libre de riesgo")
        print("7. üìà Informaci√≥n sobre gr√°ficos y visualizaciones")
        print("0. ‚ùå Salir")
        
        try:
            opcion = input("\nüëâ Selecciona una opci√≥n (0-7): ").strip()
            
            if opcion == '0':
                print("\nüëã ¬°Hasta luego!")
                break
                
            elif opcion == '1':
                print("\nüöÄ AN√ÅLISIS R√ÅPIDO MEJORADO")
                results = runner.run_enhanced_analysis(QUICK_ANALYSIS_ENHANCED)
                
            elif opcion == '2':
                print("\nüìä AN√ÅLISIS COMPREHENSIVO MEJORADO")
                results = runner.run_enhanced_analysis(COMPREHENSIVE_ANALYSIS_ENHANCED)
                
            elif opcion == '3':
                print("\nü™ô AN√ÅLISIS DE CRIPTOMONEDAS MEJORADO")
                results = runner.run_enhanced_analysis(CRYPTO_ANALYSIS_ENHANCED)
                
            elif opcion == '4':
                custom_request = create_enhanced_custom_request()
                print(f"\nüõ†Ô∏è  AN√ÅLISIS PERSONALIZADO MEJORADO")
                results = runner.run_enhanced_analysis(custom_request)
                
            elif opcion == '5':
                show_enhanced_strategy_comparison()
                
            elif opcion == '6':
                show_risk_free_rate_info()
                
            elif opcion == '7':
                show_visualization_info()
                
            else:
                print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido. ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado: {str(e)}")
            import traceback
            traceback.print_exc()


def main():
    """Funci√≥n principal del sistema mejorado"""
    try:
        main_menu()
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {str(e)}")
        print("üîß Verifica la instalaci√≥n y configuraci√≥n del sistema")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()